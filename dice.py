# ---------------------------------------------------------------------------------
#‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñÑ‚ñÄ‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÑ‚ñÄ‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà
#‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÑ‚ñÑ‚ñÄ‚ñë‚ñà‚ñÑ‚ñÑ‚ñà‚ñë‚ñà‚ñë‚ñÄ‚ñÑ‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñÄ‚ñë‚ñà
#‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñÄ‚ñÄ‚ñë‚ñë‚ñÄ‚ñÄ‚ñë‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñÄ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñë‚ñë‚ñí‚ñÄ
# Name: RandomNumbers
# Description: 
# Author: @codrago
# ---------------------------------------------------------------------------------

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @codrago_m
# meta banner: https://raw.githubusercontent.com/coddrago/modules/refs/heads/master/banner.png
# meta pic: https://0x0.st/s/4xg5IubxTkikjI6JG2AU8w/8KP_.webp
# ---------------------------------------------------------------------------------

from .. import loader, utils
import requests, random

class RandomNumbersMod(loader.Module):
    """–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å"""

    strings = {"name": "RandomNumbers"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "min_num",
                1,
                lambda: "–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞",
                validator=loader.validators.Integer(minimum=0),
            ),
        
            loader.ConfigValue(
                "max_num",
                6,
                lambda: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞",
                validator=loader.validators.Integer(minimum=1)
            ),
        )

    async def rnumcmd(self, message):
        """–£–≥–∞–¥—ã–≤–∞–π—Ç–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —á–∏—Å–ª–∞!"""
        min_num = min(self.config["min_num"], self.config["max_num"])
        max_num = max(self.config["min_num"], self.config["max_num"])
        num = random.randint(min_num, max_num)
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, f"–ì–¥–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã?\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ä–∞–¥—É–∏—Å–µ {min_num} - {max_num}")
            return
        if min_num >= max_num:
            await utils.answer(message, "–ï–±–∞–Ω—É—Ç—ã–π, –Ω–µ –ª–æ–º–∞–π –º–Ω–µ –º–æ–¥—É–ª—å! –°–¥–µ–ª–∞–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.")
            return
        if num == int(args):
            await utils.answer(message, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!\n–ß–∏—Å–ª–æ–º –±—ã–ª–æ: {num}")
            return
        else:
            await utils.answer(message, f"–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!\n–ß–∏—Å–ª–æ–º –±—ã–ª–æ: {num}")
            return
        

